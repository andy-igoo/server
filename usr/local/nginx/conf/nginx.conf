user www-data;
# 2018-12-24
# grep processor /proc/cpuinfo | wc -l
# https://www.digitalocean.com/community/tutorials/how-to-optimize-nginx-configuration#worker-processes-and-worker-connections
worker_processes 4;
error_log /var/log/_my/nginx.log error;
events {worker_connections 1024;}
http {
	access_log off;
	# 2018-08-05
	# For Sentry:
	# http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size
	# https://blog.neversyn.com/install-sentry-with-docker-easily#nginx
	client_body_buffer_size 100k;
	client_max_body_size 64m;
	default_type application/octet-stream;
	# It prevents Magento 2 failure while paying with PayPal:
	# «upstream sent too big header while reading response header from upstream»
	# "GET /store/paypal/express/return/?token=<...>&PayerID=<...>
	# http://stackoverflow.com/a/23845727
	#
	# 2018-01-02
	# «`fastcgi_buffer_size` is a special buffer space used to hold the first part of the FastCGI response,
	# which is going to be the HTTP response headers.
	#
	# You shouldn't need to adjust this from the default -
	# even if Nginx defaults to the smallest page size of 4KB (your platform will determine if 4/8k buffer)
	# it should fit your typical HTTP header.
	#
	# The one exception I have seen are frameworks that push large amounts of cookie data
	# via the Set-Cookie HTTP header during their user verification/login phase -
	# blowing out the buffer and resulting in a HTTP 500 error.
	# In those instances you will need to increase this buffer to 8k/16k/32k
	# to fully accommodate your largest upstream HTTP header being pushed.»
	#
	# https://gist.github.com/magnetikonline/11312172/fd82ba9eac8a794a86c21ab5fd47069f5de34e0b#introduction
	fastcgi_buffer_size 32k;
	# 2017-05-03
	# This value is recommended by the official sample Nginx config for Magento 2:
	# https://github.com/magento/magento2/blob/2.1.6/nginx.conf.sample#L161
	#
	# 2018-01-02
	# 1) Magento 2 recommends it for PHP files only:
	# https://github.com/magento/magento2/blob/2.2.2/nginx.conf.sample#L168
	# 2) It is for a SINGLE CONNECTION:
	# «Sets the number and size of the buffers used for reading a response from the proxied server,
	# for a single connection.»
	# http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_buffers
	# 3) I have changed it: «1024 4k» => «128 32k»
	fastcgi_buffers 128 32k;
	fastcgi_connect_timeout 3600;
	fastcgi_read_timeout 3600;
	fastcgi_send_timeout 3600;
	# 2015-08-18
	# http://nginx.org/en/docs/http/ngx_http_gzip_module.html
	# http://magento-forum.ru/topic/5187/
	gzip on;
	gzip_disable "msie6";
	gzip_comp_level 6;
	gzip_min_length 1100;
	gzip_buffers 16 8k;
	# By default only the text/html responses are gzipped.
	# I want to gzip other static content too: http://stackoverflow.com/a/12644530
	# http://nginx.org/en/docs/http/ngx_http_gzip_module.html#gzip_types
	gzip_types text/plain text/css text/js text/xml text/javascript application/javascript application/x-javascript application/json application/xml application/xml+rss;
	include mime.types;
	# 2020-05-10
	# http://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_timeout
	# https://olegnax.com/speed-up-magento-2-with-varnish-and-nginx-as-ssl-termination-on-ubuntu
	keepalive_timeout 300s;
	log_format websocket '$time_iso8601 $remote_addr $scheme $request_uri $status';
	# 2017-05-22 For Websockets, used by OroCRM.
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
    # 2017-05-21
    # It fixes the warning for OroCRM: «[warn] could not build optimal proxy_headers_hash,
    # you should increase either proxy_headers_hash_max_size: 512
    # or proxy_headers_hash_bucket_size: 64».
    proxy_headers_hash_bucket_size 256;
	proxy_read_timeout 3600;
	send_timeout 3600;
	sendfile on;
	# 2020-05-10
	# 1) «Specifies the enabled ciphers. The ciphers are specified in the format understood by the OpenSSL library»
	# http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_ciphers
	# 2) https://olegnax.com/speed-up-magento-2-with-varnish-and-nginx-as-ssl-termination-on-ubuntu
    ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
	# 2020-05-10
	# 1) http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_dhparam
	# 2) https://olegnax.com/speed-up-magento-2-with-varnish-and-nginx-as-ssl-termination-on-ubuntu
	# 3) `openssl dhparam -out ssl-dhparams.pem 2048`
	# https://hackernoon.com/configuring-your-server-to-provide-https-using-lets-encrypt-and-nginx-e46a5ae93e41
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
	# 2020-05-10
	# `shared`
	#		«a cache shared between all worker processes.
	#		The cache size is specified in bytes; one megabyte can store about 4000 sessions.
	#		Each shared cache should have an arbitrary name.
	#		A cache with the same name can be used in several virtual servers.»
    # http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_session_cache
    ssl_session_cache shared:SSL:10m;
    # 2020-05-10
    # «Specifies a time during which a client may reuse the session parameters.»
    # http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_session_timeout
    ssl_session_timeout 24h;
	# 2020-05-10
	# http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_stapling
    # https://olegnax.com/speed-up-magento-2-with-varnish-and-nginx-as-ssl-termination-on-ubuntu
    ssl_stapling on;
    # 2020-05-10
    # http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_stapling_verify
    # https://olegnax.com/speed-up-magento-2-with-varnish-and-nginx-as-ssl-termination-on-ubuntu
    ssl_stapling_verify on;
	include sites/*.conf;
	include sites/sandbox/*.conf;
}